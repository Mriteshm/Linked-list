import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Node<T> {
    T data;
    Node<T> next;
    
    public Node(T data) {
        this.data = data;
    }
}

public class Runner {
    
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static Node<Integer> takeInput() throws IOException {
        Node<Integer> head = null, tail = null;

        String[] datas = br.readLine().trim().split("\\s");

        int i = 0;
        while (i < datas.length && !datas[i].equals("-1")) {
            int data = Integer.parseInt(datas[i]);
            Node<Integer> newNode = new Node<Integer>(data);
            if(head == null) {
                head = newNode;
                tail = newNode;
            }
            else {
                tail.next = newNode;
                tail = newNode;
            }
            i += 1;
        }

        return head;
    }
    
    public static void print(Node<Integer> head){
        while(head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        
        System.out.println();
    }
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        int t = Integer.parseInt(br.readLine().trim());

        while (t > 0) {
            
            Node<Integer> head = takeInput(); 

            int n = Integer.parseInt(br.readLine().trim());
            head = Solution.appendLastNToFirst(head, n);
            print(head);

            t -= 1;
        }
        
    }
	public static LinkedListNode<Integer> appendLastNToFirst(LinkedListNode<Integer> head, int n) 
	{
		if(head==null)
		{
			return head;
		}
		if(n==0)
		{
			return head;
		}
		else{
		LinkedListNode<Integer> temp=head;
		int count=0;
		while(temp!=null)
		{
			count++;
			temp=temp.next;
		}
		LinkedListNode<Integer> tail=head;
		for(int i=1;i<count-n;i++)
		{
           tail=tail.next;
		}
		LinkedListNode<Integer> newhead=tail.next;
		LinkedListNode<Integer> newtail;
		tail.next=null;
		newtail=newhead;
		int j=1;
		while(j<n)
		{
			newtail=newtail.next;
			j++;
		}
		
		newtail.next=head;
		return newhead;
		}

	}

}
}
