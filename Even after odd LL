import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Node<T> {
    T data;
    Node<T> next;
    
    public Node(T data) {
        this.data = data;
    }
}

public class Runner {
    
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static Node<Integer> takeInput() throws IOException {
        Node<Integer> head = null, tail = null;

        String[] datas = br.readLine().trim().split("\\s");

        int i = 0;
        while(i < datas.length && !datas[i].equals("-1")) {
            int data = Integer.parseInt(datas[i]);
            Node<Integer> newNode = new Node<Integer>(data);
            if(head == null) {
                head = newNode;
                tail = newNode;
            }
            else {
                tail.next = newNode;
                tail = newNode;
            }
            i += 1;
        }

        return head;
    }
    
    public static void print(Node<Integer> head){
        while(head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        
        System.out.println();
    }
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        
        int t = Integer.parseInt(br.readLine().trim());

        while (t > 0) {

            Node<Integer> head = takeInput(); 

            Node<Integer> newHead = evenAfterOdd(head);
            print(newHead);

            t -= 1;
        }

    }
	public static LinkedListNode<Integer> evenAfterOdd(LinkedListNode<Integer> head)
     {

   if(head==null){
            return head;
        }
        LinkedListNode<Integer> OddHead=null,EvenHead=null,OddTail=null,EvenTail=null;
        while(head!=null){
            if(head.data%2==0){
                if(EvenHead==null){
                    EvenHead=head;
                    EvenTail=head;                                   
                }
                else{ 
                    EvenTail.next=head;
                    EvenTail=EvenTail.next;
                }
            }
            else{
                if(OddHead==null){
                    OddHead=head;
                    OddTail=head;
                }
                else{
                    OddTail.next=head;
                    OddTail=OddTail.next;
                }
            }
            head=head.next;
        }
        if(OddHead==null){
            return EvenHead;
        }
        else{
            OddTail.next=EvenHead;
        }
        if(EvenHead!=null){ 
            EvenTail.next=null;
        }
        return OddHead;
    }
}
