import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Node<T> {
    T data;
    Node<T> next;
    
    public Node(T data) {
        this.data = data;
    }
}

public class Runner {
    
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static Node<Integer> takeInput() throws IOException {
        Node<Integer> head = null, tail = null;

        String[] datas = br.readLine().trim().split("\\s");

        int i = 0;
        while(i < datas.length && !datas[i].equals("-1")) {
            int data = Integer.parseInt(datas[i]);
            Node<Integer> newNode = new Node<Integer>(data);
            if(head == null) {
                head = newNode;
                tail = newNode;
            }
            else {
                tail.next = newNode;
                tail = newNode;
            }
            i += 1;
        }

        return head;
    }
    
    public static void print(Node<Integer> head){
        while(head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        
        System.out.println();
    }
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        
        int t = Integer.parseInt(br.readLine().trim());

        while (t > 0) {
            
            Node<Integer> head1 = takeInput(); 
            Node<Integer> head2 = takeInput(); 

            Node<Integer> newHead = mergeTwoSorteds(head1, head2);
            print(newHead);
            
            t -= 1;
        }

    }
 public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
      if(head1==null)
      {
          return head2;
      }
      if(head2==null)
      {
          return head1;
      }
        LinkedListNode<Integer>t1=head1,t2=head2;
        LinkedListNode<Integer> head=null;
        LinkedListNode<Integer>tail=null;
        if(t1.data<=t2.data)
        {
            head=t1;
            tail=t1;
            t1=t1.next;
        }
        else
        {
            head=t2;
            tail=t2;
            t2=t2.next;
        }
        while(t1!=null&&t2!=null)
        {
            if(t1.data<=t2.data)
            {
                tail.next=t1;
                tail=t1;
                t1=t1.next;
            }
            else 
            {
                tail.next=t2;
                tail=t2;
                t2=t2.next;
            }
        }
        while(t1!=null)
        {
            tail.next=t1;
           tail=t1;
           t1=t1.next;

        }
        while(t2!=null)
        {
            tail.next=t2;
           tail=t2;
           t2=t2.next;
        }

        return head;
        
    }
}
